Index.PACKAGES = {"monix.connect.hdfs" : [{"name" : "monix.connect.hdfs.Hdfs", "shortDescription" : "", "object" : "monix\/connect\/hdfs\/Hdfs$.html", "members_object" : [{"label" : "read", "tail" : "(fs: FileSystem, path: Path, chunkSize: Int)(scheduler: Scheduler): Observable[Array[Byte]]", "member" : "monix.connect.hdfs.Hdfs.read", "link" : "monix\/connect\/hdfs\/Hdfs$.html#read(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,chunkSize:Int)(implicitscheduler:monix.execution.Scheduler):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "write", "tail" : "(fs: FileSystem, path: Path, overwrite: Boolean, replication: Short, bufferSize: Int, blockSize: Int, lineSeparator: Option[String])(scheduler: Scheduler): Consumer[Array[Byte], Long]", "member" : "monix.connect.hdfs.Hdfs.write", "link" : "monix\/connect\/hdfs\/Hdfs$.html#write(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,overwrite:Boolean,replication:Short,bufferSize:Int,blockSize:Int,lineSeparator:Option[String])(implicitscheduler:monix.execution.Scheduler):monix.reactive.Consumer[Array[Byte],Long]", "kind" : "def"}, {"label" : "append", "tail" : "(fs: FileSystem, path: Path, lineSeparator: Option[String])(scheduler: Scheduler): Consumer[Array[Byte], Long]", "member" : "monix.connect.hdfs.Hdfs.append", "link" : "monix\/connect\/hdfs\/Hdfs$.html#append(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,lineSeparator:Option[String])(implicitscheduler:monix.execution.Scheduler):monix.reactive.Consumer[Array[Byte],Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/hdfs\/Hdfs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/hdfs\/Hdfs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/hdfs\/Hdfs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/hdfs\/Hdfs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/hdfs\/Hdfs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/hdfs\/Hdfs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/hdfs\/Hdfs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/hdfs\/Hdfs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/hdfs\/Hdfs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/hdfs\/Hdfs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/hdfs\/Hdfs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/hdfs\/Hdfs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/hdfs\/Hdfs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/hdfs\/Hdfs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/hdfs\/Hdfs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/hdfs\/Hdfs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/hdfs\/Hdfs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/hdfs\/Hdfs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/hdfs\/Hdfs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.s3" : [{"name" : "monix.connect.s3.S3", "shortDescription" : "An idiomatic monix service client for Amazon S3.", "object" : "monix\/connect\/s3\/S3$.html", "members_object" : [{"label" : "putObject", "tail" : "(request: PutObjectRequest, content: Array[Byte])(s3Client: S3AsyncClient, scheduler: Scheduler): Task[PutObjectResponse]", "member" : "monix.connect.s3.S3.putObject", "link" : "monix\/connect\/s3\/S3$.html#putObject(request:software.amazon.awssdk.services.s3.model.PutObjectRequest,content:Array[Byte])(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient,implicitscheduler:monix.execution.Scheduler):monix.eval.Task[software.amazon.awssdk.services.s3.model.PutObjectResponse]", "kind" : "def"}, {"label" : "putObject", "tail" : "(bucketName: String, key: String, content: Array[Byte], contentLength: Option[Long], contentType: Option[String], acl: Option[String], grantFullControl: Option[String], grantRead: Option[String], grantReadACP: Option[String], grantWriteACP: Option[String], requestPayer: Option[String], serverSideEncryption: Option[String], sseCustomerAlgorithm: Option[String], sseCustomerKey: Option[String], sseCustomerKeyMD5: Option[String], ssekmsEncryptionContext: Option[String], ssekmsKeyId: Option[String])(s3Client: S3AsyncClient, scheduler: Scheduler): Task[PutObjectResponse]", "member" : "monix.connect.s3.S3.putObject", "link" : "monix\/connect\/s3\/S3$.html#putObject(bucketName:String,key:String,content:Array[Byte],contentLength:Option[Long],contentType:Option[String],acl:Option[String],grantFullControl:Option[String],grantRead:Option[String],grantReadACP:Option[String],grantWriteACP:Option[String],requestPayer:Option[String],serverSideEncryption:Option[String],sseCustomerAlgorithm:Option[String],sseCustomerKey:Option[String],sseCustomerKeyMD5:Option[String],ssekmsEncryptionContext:Option[String],ssekmsKeyId:Option[String])(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient,implicitscheduler:monix.execution.Scheduler):monix.eval.Task[software.amazon.awssdk.services.s3.model.PutObjectResponse]", "kind" : "def"}, {"label" : "multipartUpload", "tail" : "(bucket: String, key: String, chunkSize: Int, acl: Option[String], contentType: Option[String], grantFullControl: Option[String], grantRead: Option[String], grantReadACP: Option[String], grantWriteACP: Option[String], serverSideEncryption: Option[String], sseCustomerAlgorithm: Option[String], sseCustomerKey: Option[String], sseCustomerKeyMD5: Option[String], ssekmsEncryptionContext: Option[String], ssekmsKeyId: Option[String], requestPayer: Option[String])(s3Client: S3AsyncClient): Consumer[Array[Byte], CompleteMultipartUploadResponse]", "member" : "monix.connect.s3.S3.multipartUpload", "link" : "monix\/connect\/s3\/S3$.html#multipartUpload(bucket:String,key:String,chunkSize:Int,acl:Option[String],contentType:Option[String],grantFullControl:Option[String],grantRead:Option[String],grantReadACP:Option[String],grantWriteACP:Option[String],serverSideEncryption:Option[String],sseCustomerAlgorithm:Option[String],sseCustomerKey:Option[String],sseCustomerKeyMD5:Option[String],ssekmsEncryptionContext:Option[String],ssekmsKeyId:Option[String],requestPayer:Option[String])(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.reactive.Consumer[Array[Byte],software.amazon.awssdk.services.s3.model.CompleteMultipartUploadResponse]", "kind" : "def"}, {"label" : "listObjectsV2", "tail" : "(request: ListObjectsV2Request)(s3Client: S3AsyncClient): Task[ListObjectsV2Response]", "member" : "monix.connect.s3.S3.listObjectsV2", "link" : "monix\/connect\/s3\/S3$.html#listObjectsV2(request:software.amazon.awssdk.services.s3.model.ListObjectsV2Request)(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.ListObjectsV2Response]", "kind" : "def"}, {"label" : "listObjectsV2", "tail" : "(bucket: String, prefix: Option[String], continuationToken: Option[String], fetchOwner: Option[Boolean], maxKeys: Option[Int], startAfter: Option[String], requestPayer: Option[String])(s3Client: S3AsyncClient): Task[ListObjectsV2Response]", "member" : "monix.connect.s3.S3.listObjectsV2", "link" : "monix\/connect\/s3\/S3$.html#listObjectsV2(bucket:String,prefix:Option[String],continuationToken:Option[String],fetchOwner:Option[Boolean],maxKeys:Option[Int],startAfter:Option[String],requestPayer:Option[String])(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.ListObjectsV2Response]", "kind" : "def"}, {"label" : "listObjects", "tail" : "(request: ListObjectsRequest)(s3Client: S3AsyncClient): Task[ListObjectsResponse]", "member" : "monix.connect.s3.S3.listObjects", "link" : "monix\/connect\/s3\/S3$.html#listObjects(request:software.amazon.awssdk.services.s3.model.ListObjectsRequest)(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.ListObjectsResponse]", "kind" : "def"}, {"label" : "listObjects", "tail" : "(bucket: String, prefix: Option[String], marker: Option[String], maxKeys: Option[Int], requestPayer: Option[String])(s3Client: S3AsyncClient): Task[ListObjectsResponse]", "member" : "monix.connect.s3.S3.listObjects", "link" : "monix\/connect\/s3\/S3$.html#listObjects(bucket:String,prefix:Option[String],marker:Option[String],maxKeys:Option[Int],requestPayer:Option[String])(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.ListObjectsResponse]", "kind" : "def"}, {"label" : "getObject", "tail" : "(request: GetObjectRequest)(s3Client: S3AsyncClient): Task[Array[Byte]]", "member" : "monix.connect.s3.S3.getObject", "link" : "monix\/connect\/s3\/S3$.html#getObject(request:software.amazon.awssdk.services.s3.model.GetObjectRequest)(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "getObject", "tail" : "(bucket: String, key: String, ifMatch: Option[String], ifModifiedSince: Option[Instant], ifNoneMatch: Option[String], ifUnmodifiedSince: Option[Instant], range: Option[String], requestPayer: Option[String], partNumber: Option[Int], sseCustomerAlgorithm: Option[String], sseCustomerKey: Option[String], sseCustomerKeyMD5: Option[String], versionId: Option[String])(s3Client: S3AsyncClient): Task[Array[Byte]]", "member" : "monix.connect.s3.S3.getObject", "link" : "monix\/connect\/s3\/S3$.html#getObject(bucket:String,key:String,ifMatch:Option[String],ifModifiedSince:Option[java.time.Instant],ifNoneMatch:Option[String],ifUnmodifiedSince:Option[java.time.Instant],range:Option[String],requestPayer:Option[String],partNumber:Option[Int],sseCustomerAlgorithm:Option[String],sseCustomerKey:Option[String],sseCustomerKeyMD5:Option[String],versionId:Option[String])(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "deleteObject", "tail" : "(request: DeleteObjectRequest)(s3Client: S3AsyncClient): Task[DeleteObjectResponse]", "member" : "monix.connect.s3.S3.deleteObject", "link" : "monix\/connect\/s3\/S3$.html#deleteObject(request:software.amazon.awssdk.services.s3.model.DeleteObjectRequest)(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteObjectResponse]", "kind" : "def"}, {"label" : "deleteObject", "tail" : "(bucket: String, key: String, bypassGovernanceRetention: Option[Boolean], mfa: Option[String], requestPayer: Option[String], versionId: Option[String])(s3Client: S3AsyncClient): Task[DeleteObjectResponse]", "member" : "monix.connect.s3.S3.deleteObject", "link" : "monix\/connect\/s3\/S3$.html#deleteObject(bucket:String,key:String,bypassGovernanceRetention:Option[Boolean],mfa:Option[String],requestPayer:Option[String],versionId:Option[String])(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteObjectResponse]", "kind" : "def"}, {"label" : "deleteBucket", "tail" : "(request: DeleteBucketRequest)(s3Client: S3AsyncClient): Task[DeleteBucketResponse]", "member" : "monix.connect.s3.S3.deleteBucket", "link" : "monix\/connect\/s3\/S3$.html#deleteBucket(request:software.amazon.awssdk.services.s3.model.DeleteBucketRequest)(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteBucketResponse]", "kind" : "def"}, {"label" : "deleteBucket", "tail" : "(bucket: String)(s3Client: S3AsyncClient): Task[DeleteBucketResponse]", "member" : "monix.connect.s3.S3.deleteBucket", "link" : "monix\/connect\/s3\/S3$.html#deleteBucket(bucket:String)(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteBucketResponse]", "kind" : "def"}, {"label" : "createBucket", "tail" : "(request: CreateBucketRequest)(s3Client: S3AsyncClient): Task[CreateBucketResponse]", "member" : "monix.connect.s3.S3.createBucket", "link" : "monix\/connect\/s3\/S3$.html#createBucket(request:software.amazon.awssdk.services.s3.model.CreateBucketRequest)(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.CreateBucketResponse]", "kind" : "def"}, {"label" : "createBucket", "tail" : "(bucket: String, acl: Option[String], grantFullControl: Option[String], grantRead: Option[String], grantReadACP: Option[String], grantWrite: Option[String], grantWriteACP: Option[String], objectLockEnabledForBucket: Option[Boolean])(s3Client: S3AsyncClient): Task[CreateBucketResponse]", "member" : "monix.connect.s3.S3.createBucket", "link" : "monix\/connect\/s3\/S3$.html#createBucket(bucket:String,acl:Option[String],grantFullControl:Option[String],grantRead:Option[String],grantReadACP:Option[String],grantWrite:Option[String],grantWriteACP:Option[String],objectLockEnabledForBucket:Option[Boolean])(implicits3Client:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.CreateBucketResponse]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/s3\/S3$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/s3\/S3$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/s3\/S3$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/s3\/S3$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/s3\/S3$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/s3\/S3$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/s3\/S3$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/s3\/S3$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/s3\/S3$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/s3\/S3$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/s3\/S3$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/s3\/S3$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/s3\/S3$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/s3\/S3$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/s3\/S3$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/s3\/S3$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.parquet" : [{"name" : "monix.connect.parquet.Parquet", "shortDescription" : "", "object" : "monix\/connect\/parquet\/Parquet$.html", "members_object" : [{"label" : "reader", "tail" : "(reader: ParquetReader[T])(scheduler: Scheduler): Observable[T]", "member" : "monix.connect.parquet.Parquet.reader", "link" : "monix\/connect\/parquet\/Parquet$.html#reader[T](reader:org.apache.parquet.hadoop.ParquetReader[T])(implicitscheduler:monix.execution.Scheduler):monix.reactive.Observable[T]", "kind" : "def"}, {"label" : "writer", "tail" : "(writer: ParquetWriter[T])(scheduler: Scheduler): Consumer[T, Long]", "member" : "monix.connect.parquet.Parquet.writer", "link" : "monix\/connect\/parquet\/Parquet$.html#writer[T](writer:org.apache.parquet.hadoop.ParquetWriter[T])(implicitscheduler:monix.execution.Scheduler):monix.reactive.Consumer[T,Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/parquet\/Parquet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/parquet\/Parquet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/parquet\/Parquet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/parquet\/Parquet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/parquet\/Parquet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/parquet\/Parquet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/parquet\/Parquet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/Parquet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/Parquet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/Parquet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/parquet\/Parquet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/parquet\/Parquet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/parquet\/Parquet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/parquet\/Parquet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/parquet\/Parquet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/parquet\/Parquet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/parquet\/Parquet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/parquet\/Parquet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/parquet\/Parquet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.parquet.ParquetPublisher", "shortDescription" : "Companion object builder for ParquetPublisher.", "object" : "monix\/connect\/parquet\/ParquetPublisher$.html", "members_object" : [{"label" : "apply", "tail" : "(reader: ParquetReader[T]): ParquetPublisher[T]", "member" : "monix.connect.parquet.ParquetPublisher.apply", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#apply[T](reader:org.apache.parquet.hadoop.ParquetReader[T]):monix.connect.parquet.ParquetPublisher[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/parquet\/ParquetPublisher$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.parquet.ParquetSubscriber", "shortDescription" : "A parquet writer implemented as a Subscriber.Sync.", "members_class" : [{"label" : "createSubscriber", "tail" : "(callback: Callback[Throwable, Long], s: Scheduler): (Sync[T], AssignableCancelable)", "member" : "monix.connect.parquet.ParquetSubscriber.createSubscriber", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#createSubscriber(callback:monix.execution.Callback[Throwable,Long],s:monix.execution.Scheduler):(monix.reactive.observers.Subscriber.Sync[T],monix.execution.cancelables.AssignableCancelable)", "kind" : "def"}, {"member" : "monix.connect.parquet.ParquetSubscriber#<init>", "error" : "unsupported entity"}, {"label" : "mapTask", "tail" : "(f: (Long) â‡’ Task[R2]): Consumer[T, R2]", "member" : "monix.reactive.Consumer.mapTask", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#mapTask[R2](f:R=>monix.eval.Task[R2]):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (Long) â‡’ F[R2])(F: TaskLike[F]): Consumer[T, R2]", "member" : "monix.reactive.Consumer.mapEval", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#mapEval[F[_<:<?>],R2](f:R=>F[R2])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (Long) â‡’ R2): Consumer[T, R2]", "member" : "monix.reactive.Consumer.map", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#map[R2](f:R=>R2):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "transformInput", "tail" : "(f: (Observable[In2]) â‡’ Observable[T]): Consumer[In2, Long]", "member" : "monix.reactive.Consumer.transformInput", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#transformInput[In2](f:monix.reactive.Observable[In2]=>monix.reactive.Observable[In]):monix.reactive.Consumer[In2,R]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (In2) â‡’ T): Consumer[In2, Long]", "member" : "monix.reactive.Consumer.contramap", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#contramap[In2](f:In2=>In):monix.reactive.Consumer[In2,R]", "kind" : "final def"}, {"label" : "apply", "tail" : "(source: Observable[T]): Task[Long]", "member" : "monix.reactive.Consumer.apply", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#apply(source:monix.reactive.Observable[In]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Task[Long]) â‡’ A): (Observable[T]) â‡’ A", "member" : "scala.Function1.andThen", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) â‡’ Observable[T]): (A) â‡’ Task[Long]", "member" : "scala.Function1.compose", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/parquet\/ParquetSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/parquet\/ParquetSubscriber.html", "kind" : "class"}], "monix.connect.akka.stream" : [{"name" : "monix.connect.akka.stream.Converters", "shortDescription" : "", "object" : "monix\/connect\/akka\/stream\/Converters$.html", "members_object" : [{"label" : "ExtendedMonixConsumer", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedMonixConsumer", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedMonixConsumer[-In,+R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExtendedObservable", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedObservable", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedObservable[+In]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExtendedAkkaSource", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedAkkaSource", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedAkkaSource[+In,+Mat]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExtendedAkkaFlow", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedAkkaFlow", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedAkkaFlow[-In,+Out,+Mat]extendsConverters.ExtendedAkkaSink[In,scala.concurrent.Future[Out]]", "kind" : "implicit class"}, {"label" : "ExtendedAkkaSink", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedAkkaSink", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedAkkaSink[-In,+R<:scala.concurrent.Future[_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/akka\/stream\/Converters$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/akka\/stream\/Converters$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/akka\/stream\/Converters$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/akka\/stream\/Converters$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/akka\/stream\/Converters$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/akka\/stream\/Converters$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/akka\/stream\/Converters$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/akka\/stream\/Converters$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/akka\/stream\/Converters$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/akka\/stream\/Converters$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/akka\/stream\/Converters$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/akka\/stream\/Converters$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/akka\/stream\/Converters$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/akka\/stream\/Converters$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/akka\/stream\/Converters$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/akka\/stream\/Converters$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/akka\/stream\/Converters$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/akka\/stream\/Converters$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect" : [], "monix.connect.akka" : [], "monix" : [], "monix.connect.redis" : [{"name" : "monix.connect.redis.Redis", "shortDescription" : "An object that provides an aggregation of all the different Redis Apis.", "object" : "monix\/connect\/redis\/Redis$.html", "members_object" : [{"label" : "flushdbAsync", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.flushdbAsync", "link" : "monix\/connect\/redis\/Redis$.html#flushdbAsync[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "flushallAsync", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.flushallAsync", "link" : "monix\/connect\/redis\/Redis$.html#flushallAsync[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "configResetstat", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.configResetstat", "link" : "monix\/connect\/redis\/Redis$.html#configResetstat[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "configGet", "tail" : "(parameter: String)(connection: StatefulRedisConnection[K, V]): Task[Map[String, String]]", "member" : "monix.connect.redis.RedisServer.configGet", "link" : "monix\/connect\/redis\/Redis$.html#configGet[K,V](parameter:String)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[scala.collection.mutable.Map[String,String]]", "kind" : "def"}, {"label" : "commandCount", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisServer.commandCount", "link" : "monix\/connect\/redis\/Redis$.html#commandCount[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "clientList", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientList", "link" : "monix\/connect\/redis\/Redis$.html#clientList[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientKill", "tail" : "(addr: String)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientKill", "link" : "monix\/connect\/redis\/Redis$.html#clientKill[K,V](addr:String)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientSetname", "tail" : "(name: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientSetname", "link" : "monix\/connect\/redis\/Redis$.html#clientSetname[K,V](name:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientGetname", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientGetname", "link" : "monix\/connect\/redis\/Redis$.html#clientGetname[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "bgsave", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.bgsave", "link" : "monix\/connect\/redis\/Redis$.html#bgsave[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "bgrewriteaof", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.bgrewriteaof", "link" : "monix\/connect\/redis\/Redis$.html#bgrewriteaof[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "strlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.strlen", "link" : "monix\/connect\/redis\/Redis$.html#strlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setrange", "tail" : "(key: K, offset: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.setrange", "link" : "monix\/connect\/redis\/Redis$.html#setrange[K,V](key:K,offset:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setnx", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisString.setnx", "link" : "monix\/connect\/redis\/Redis$.html#setnx[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "psetex", "tail" : "(key: K, milliseconds: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.psetex", "link" : "monix\/connect\/redis\/Redis$.html#psetex[K,V](key:K,milliseconds:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "setex", "tail" : "(key: K, seconds: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.setex", "link" : "monix\/connect\/redis\/Redis$.html#setex[K,V](key:K,seconds:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "setbit", "tail" : "(key: K, offset: Long, value: Int)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.setbit", "link" : "monix\/connect\/redis\/Redis$.html#setbit[K,V](key:K,offset:Long,value:Int)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "set", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.set", "link" : "monix\/connect\/redis\/Redis$.html#set[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "msetnx", "tail" : "(map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisString.msetnx", "link" : "monix\/connect\/redis\/Redis$.html#msetnx[K,V](map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "mset", "tail" : "(map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.mset", "link" : "monix\/connect\/redis\/Redis$.html#mset[K,V](map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "mget", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisString.mget", "link" : "monix\/connect\/redis\/Redis$.html#mget[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "incrbyfloat", "tail" : "(key: K, amount: Double)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisString.incrbyfloat", "link" : "monix\/connect\/redis\/Redis$.html#incrbyfloat[K,V](key:K,amount:Double)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "incrby", "tail" : "(key: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.incrby", "link" : "monix\/connect\/redis\/Redis$.html#incrby[K,V](key:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "incr", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.incr", "link" : "monix\/connect\/redis\/Redis$.html#incr[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "getset", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.getset", "link" : "monix\/connect\/redis\/Redis$.html#getset[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "getrange", "tail" : "(key: K, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.getrange", "link" : "monix\/connect\/redis\/Redis$.html#getrange[K,V](key:K,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "getbit", "tail" : "(key: K, offset: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.getbit", "link" : "monix\/connect\/redis\/Redis$.html#getbit[K,V](key:K,offset:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "get", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.get", "link" : "monix\/connect\/redis\/Redis$.html#get[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "decrby", "tail" : "(key: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.decrby", "link" : "monix\/connect\/redis\/Redis$.html#decrby[K,V](key:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "decr", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.decr", "link" : "monix\/connect\/redis\/Redis$.html#decr[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopXor", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopXor", "link" : "monix\/connect\/redis\/Redis$.html#bitopXor[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopOr", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopOr", "link" : "monix\/connect\/redis\/Redis$.html#bitopOr[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopNot", "tail" : "(destination: K, source: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopNot", "link" : "monix\/connect\/redis\/Redis$.html#bitopNot[K,V](destination:K,source:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopAnd", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopAnd", "link" : "monix\/connect\/redis\/Redis$.html#bitopAnd[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/Redis$.html#bitpos[K,V](key:K,state:Boolean,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean, start: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/Redis$.html#bitpos[K,V](key:K,state:Boolean,start:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/Redis$.html#bitpos[K,V](key:K,state:Boolean)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitcount", "tail" : "(key: K, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitcount", "link" : "monix\/connect\/redis\/Redis$.html#bitcount[K,V](key:K,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitcount", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitcount", "link" : "monix\/connect\/redis\/Redis$.html#bitcount[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "append", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.append", "link" : "monix\/connect\/redis\/Redis$.html#append[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xtrim", "tail" : "(key: K, approximateTrimming: Boolean, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/Redis$.html#xtrim[K,V](key:K,approximateTrimming:Boolean,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xtrim", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/Redis$.html#xtrim[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/Redis$.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/Redis$.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xreadgroup", "tail" : "(consumer: Consumer[K], streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xreadgroup", "link" : "monix\/connect\/redis\/Redis$.html#xreadgroup[K,V](consumer:io.lettuce.core.Consumer[K],streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xread", "tail" : "(streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xread", "link" : "monix\/connect\/redis\/Redis$.html#xread[K,V](streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/Redis$.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/Redis$.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, consumer: Consumer[K], range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/Redis$.html#xpending[K,V](key:K,consumer:io.lettuce.core.Consumer[K],range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/Redis$.html#xpending[K,V](key:K,group:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/Redis$.html#xpending[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xlen", "link" : "monix\/connect\/redis\/Redis$.html#xlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupSetid", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupSetid", "link" : "monix\/connect\/redis\/Redis$.html#xgroupSetid[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xgroupDestroy", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDestroy", "link" : "monix\/connect\/redis\/Redis$.html#xgroupDestroy[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupDelconsumer", "tail" : "(key: K, consumer: Consumer[K])(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDelconsumer", "link" : "monix\/connect\/redis\/Redis$.html#xgroupDelconsumer[K,V](key:K,consumer:io.lettuce.core.Consumer[K])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupCreate", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupCreate", "link" : "monix\/connect\/redis\/Redis$.html#xgroupCreate[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xdel", "tail" : "(key: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xdel", "link" : "monix\/connect\/redis\/Redis$.html#xdel[K,V](key:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xclaim", "tail" : "(key: K, consumer: Consumer[K], minIdleTime: Long, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xclaim", "link" : "monix\/connect\/redis\/Redis$.html#xclaim[K,V](key:K,consumer:io.lettuce.core.Consumer[K],minIdleTime:Long,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xadd", "tail" : "(key: K, body: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xadd", "link" : "monix\/connect\/redis\/Redis$.html#xadd[K,V](key:K,body:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xack", "tail" : "(key: K, group: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xack", "link" : "monix\/connect\/redis\/Redis$.html#xack[K,V](key:K,group:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zunionstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zunionstore", "link" : "monix\/connect\/redis\/Redis$.html#zunionstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zscore", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zscore", "link" : "monix\/connect\/redis\/Redis$.html#zscore[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValueScanCursor[V]]", "member" : "monix.connect.redis.RedisSortedSet.zscan", "link" : "monix\/connect\/redis\/Redis$.html#zscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValueScanCursor[V]]", "kind" : "def"}, {"label" : "zrevrank", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrevrank", "link" : "monix\/connect\/redis\/Redis$.html#zrevrank[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrevrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscoreWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscoreWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrangebyscore", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebylex", "tail" : "(key: K, range: Range[_ <: V], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangeWithScores", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangeWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangeWithScores[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrange", "link" : "monix\/connect\/redis\/Redis$.html#zrevrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zremrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zremrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zremrangebyrank", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebyrank", "link" : "monix\/connect\/redis\/Redis$.html#zremrangebyrank[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zremrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zremrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrem", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrem", "link" : "monix\/connect\/redis\/Redis$.html#zrem[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrank", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrank", "link" : "monix\/connect\/redis\/Redis$.html#zrank[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscoreWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscoreWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrangebyscore", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebylex", "tail" : "(key: K, range: Range[_ <: V], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangeWithScores", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangeWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrangeWithScores[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrange", "link" : "monix\/connect\/redis\/Redis$.html#zrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zpopmax", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmax", "link" : "monix\/connect\/redis\/Redis$.html#zpopmax[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmax", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmax", "link" : "monix\/connect\/redis\/Redis$.html#zpopmax[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmin", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmin", "link" : "monix\/connect\/redis\/Redis$.html#zpopmin[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmin", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmin", "link" : "monix\/connect\/redis\/Redis$.html#zpopmin[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zlexcount", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zlexcount", "link" : "monix\/connect\/redis\/Redis$.html#zlexcount[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zinterstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zinterstore", "link" : "monix\/connect\/redis\/Redis$.html#zinterstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zincrby", "tail" : "(key: K, amount: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zincrby", "link" : "monix\/connect\/redis\/Redis$.html#zincrby[K,V](key:K,amount:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zcount", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zcount", "link" : "monix\/connect\/redis\/Redis$.html#zcount[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zcard", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zcard", "link" : "monix\/connect\/redis\/Redis$.html#zcard[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zaddincr", "tail" : "(key: K, score: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zaddincr", "link" : "monix\/connect\/redis\/Redis$.html#zaddincr[K,V](key:K,score:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zadd", "tail" : "(key: K, scoredValues: ScoredValue[V]*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zadd", "link" : "monix\/connect\/redis\/Redis$.html#zadd[K,V](key:K,scoredValues:io.lettuce.core.ScoredValue[V]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zadd", "tail" : "(key: K, score: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zadd", "link" : "monix\/connect\/redis\/Redis$.html#zadd[K,V](key:K,score:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bzpopmax", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, ScoredValue[V]]]", "member" : "monix.connect.redis.RedisSortedSet.bzpopmax", "link" : "monix\/connect\/redis\/Redis$.html#bzpopmax[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,io.lettuce.core.ScoredValue[V]]]", "kind" : "def"}, {"label" : "bzpopmin", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, ScoredValue[V]]]", "member" : "monix.connect.redis.RedisSortedSet.bzpopmin", "link" : "monix\/connect\/redis\/Redis$.html#bzpopmin[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,io.lettuce.core.ScoredValue[V]]]", "kind" : "def"}, {"label" : "sscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ValueScanCursor[V]]", "member" : "monix.connect.redis.RedisSet.sscan", "link" : "monix\/connect\/redis\/Redis$.html#sscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ValueScanCursor[V]]", "kind" : "def"}, {"label" : "sunionstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sunionstore", "link" : "monix\/connect\/redis\/Redis$.html#sunionstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sunion", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sunion", "link" : "monix\/connect\/redis\/Redis$.html#sunion[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "srem", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.srem", "link" : "monix\/connect\/redis\/Redis$.html#srem[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "srandmember", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.srandmember", "link" : "monix\/connect\/redis\/Redis$.html#srandmember[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "srandmember", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisSet.srandmember", "link" : "monix\/connect\/redis\/Redis$.html#srandmember[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "spop", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.spop", "link" : "monix\/connect\/redis\/Redis$.html#spop[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "spop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisSet.spop", "link" : "monix\/connect\/redis\/Redis$.html#spop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "smembers", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.smembers", "link" : "monix\/connect\/redis\/Redis$.html#smembers[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "smove", "tail" : "(source: K, destination: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisSet.smove", "link" : "monix\/connect\/redis\/Redis$.html#smove[K,V](source:K,destination:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sismember", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisSet.sismember", "link" : "monix\/connect\/redis\/Redis$.html#sismember[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sinterstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sinterstore", "link" : "monix\/connect\/redis\/Redis$.html#sinterstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sinter", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sinter", "link" : "monix\/connect\/redis\/Redis$.html#sinter[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sdiffstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sdiffstore", "link" : "monix\/connect\/redis\/Redis$.html#sdiffstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sdiff", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sdiff", "link" : "monix\/connect\/redis\/Redis$.html#sdiff[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "scard", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.scard", "link" : "monix\/connect\/redis\/Redis$.html#scard[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sadd", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sadd", "link" : "monix\/connect\/redis\/Redis$.html#sadd[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "waitForReplication", "tail" : "(replicas: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.waitForReplication", "link" : "monix\/connect\/redis\/Redis$.html#waitForReplication[K,V](replicas:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "quit", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.quit", "link" : "monix\/connect\/redis\/Redis$.html#quit[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readWrite", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readWrite", "link" : "monix\/connect\/redis\/Redis$.html#readWrite[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readOnly", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readOnly", "link" : "monix\/connect\/redis\/Redis$.html#readOnly[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ping", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.ping", "link" : "monix\/connect\/redis\/Redis$.html#ping[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "role", "tail" : "()(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisPubSub.role", "link" : "monix\/connect\/redis\/Redis$.html#role[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "echo", "tail" : "(msg: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisPubSub.echo", "link" : "monix\/connect\/redis\/Redis$.html#echo[K,V](msg:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "pubsubNumpat", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumpat", "link" : "monix\/connect\/redis\/Redis$.html#pubsubNumpat[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pubsubNumsub", "tail" : "(channels: K*)(connection: StatefulRedisConnection[K, V]): Task[Map[K, Long]]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumsub", "link" : "monix\/connect\/redis\/Redis$.html#pubsubNumsub[K,V](channels:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Map[K,Long]]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(channel: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/Redis$.html#pubsubChannels[K,V](channel:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/Redis$.html#pubsubChannels[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "publish", "tail" : "(channel: K, message: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.publish", "link" : "monix\/connect\/redis\/Redis$.html#publish[K,V](channel:K,message:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpushx", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.rpushx", "link" : "monix\/connect\/redis\/Redis$.html#rpushx[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpush", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.rpush", "link" : "monix\/connect\/redis\/Redis$.html#rpush[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpoplpush", "tail" : "(source: K, destination: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.rpoplpush", "link" : "monix\/connect\/redis\/Redis$.html#rpoplpush[K,V](source:K,destination:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "rpop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.rpop", "link" : "monix\/connect\/redis\/Redis$.html#rpop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "ltrim", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisList.ltrim", "link" : "monix\/connect\/redis\/Redis$.html#ltrim[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "lset", "tail" : "(key: K, index: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisList.lset", "link" : "monix\/connect\/redis\/Redis$.html#lset[K,V](key:K,index:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "lrem", "tail" : "(key: K, count: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lrem", "link" : "monix\/connect\/redis\/Redis$.html#lrem[K,V](key:K,count:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisList.lrange", "link" : "monix\/connect\/redis\/Redis$.html#lrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "lpushx", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lpushx", "link" : "monix\/connect\/redis\/Redis$.html#lpushx[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lpush", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lpush", "link" : "monix\/connect\/redis\/Redis$.html#lpush[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lpop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.lpop", "link" : "monix\/connect\/redis\/Redis$.html#lpop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "llen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.llen", "link" : "monix\/connect\/redis\/Redis$.html#llen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "linsert", "tail" : "(key: K, before: Boolean, pivot: V, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.linsert", "link" : "monix\/connect\/redis\/Redis$.html#linsert[K,V](key:K,before:Boolean,pivot:V,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lindex", "tail" : "(key: K, index: Long)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.lindex", "link" : "monix\/connect\/redis\/Redis$.html#lindex[K,V](key:K,index:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "brpoplpush", "tail" : "(timeout: Long, source: K, destination: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.brpoplpush", "link" : "monix\/connect\/redis\/Redis$.html#brpoplpush[K,V](timeout:Long,source:K,destination:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "brpop", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisList.brpop", "link" : "monix\/connect\/redis\/Redis$.html#brpop[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "blpop", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisList.blpop", "link" : "monix\/connect\/redis\/Redis$.html#blpop[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "hvals", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisHash.hvals", "link" : "monix\/connect\/redis\/Redis$.html#hvals[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "hstrlen", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hstrlen", "link" : "monix\/connect\/redis\/Redis$.html#hstrlen[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hsetnx", "tail" : "(key: K, field: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hsetnx", "link" : "monix\/connect\/redis\/Redis$.html#hsetnx[K,V](key:K,field:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hset", "tail" : "(key: K, field: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hset", "link" : "monix\/connect\/redis\/Redis$.html#hset[K,V](key:K,field:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hscan", "tail" : "(key: K, scanCursor: ScanCursor)(connection: StatefulRedisConnection[K, V]): Task[MapScanCursor[K, V]]", "member" : "monix.connect.redis.RedisHash.hscan", "link" : "monix\/connect\/redis\/Redis$.html#hscan[K,V](key:K,scanCursor:io.lettuce.core.ScanCursor)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.MapScanCursor[K,V]]", "kind" : "def"}, {"label" : "hscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[MapScanCursor[K, V]]", "member" : "monix.connect.redis.RedisHash.hscan", "link" : "monix\/connect\/redis\/Redis$.html#hscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.MapScanCursor[K,V]]", "kind" : "def"}, {"label" : "hmset", "tail" : "(key: K, map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisHash.hmset", "link" : "monix\/connect\/redis\/Redis$.html#hmset[K,V](key:K,map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "hmget", "tail" : "(key: K, fields: K*)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisHash.hmget", "link" : "monix\/connect\/redis\/Redis$.html#hmget[K,V](key:K,fields:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "hlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hlen", "link" : "monix\/connect\/redis\/Redis$.html#hlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hkeys", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisHash.hkeys", "link" : "monix\/connect\/redis\/Redis$.html#hkeys[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "hgetall", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Map[K, V]]", "member" : "monix.connect.redis.RedisHash.hgetall", "link" : "monix\/connect\/redis\/Redis$.html#hgetall[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Map[K,V]]", "kind" : "def"}, {"label" : "hincrbyfloat", "tail" : "(key: K, field: K, amount: Double)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisHash.hincrbyfloat", "link" : "monix\/connect\/redis\/Redis$.html#hincrbyfloat[K,V](key:K,field:K,amount:Double)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "hincrby", "tail" : "(key: K, field: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hincrby", "link" : "monix\/connect\/redis\/Redis$.html#hincrby[K,V](key:K,field:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hget", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Option[V]]", "member" : "monix.connect.redis.RedisHash.hget", "link" : "monix\/connect\/redis\/Redis$.html#hget[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "hexists", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hexists", "link" : "monix\/connect\/redis\/Redis$.html#hexists[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hdel", "tail" : "(key: K, fields: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hdel", "link" : "monix\/connect\/redis\/Redis$.html#hdel[K,V](key:K,fields:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "scan", "tail" : "(scanCursor: ScanCursor)(connection: StatefulRedisConnection[K, V]): Task[KeyScanCursor[K]]", "member" : "monix.connect.redis.RedisKey.scan", "link" : "monix\/connect\/redis\/Redis$.html#scan[K,V](scanCursor:io.lettuce.core.ScanCursor)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyScanCursor[K]]", "kind" : "def"}, {"label" : "scan", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[KeyScanCursor[K]]", "member" : "monix.connect.redis.RedisKey.scan", "link" : "monix\/connect\/redis\/Redis$.html#scan[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyScanCursor[K]]", "kind" : "def"}, {"label" : "type", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.type", "link" : "monix\/connect\/redis\/Redis$.html#type[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ttl", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.ttl", "link" : "monix\/connect\/redis\/Redis$.html#ttl[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "touch", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.touch", "link" : "monix\/connect\/redis\/Redis$.html#touch[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sort", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisKey.sort", "link" : "monix\/connect\/redis\/Redis$.html#sort[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "restore", "tail" : "(key: K, ttl: Long, value: Array[Byte])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.restore", "link" : "monix\/connect\/redis\/Redis$.html#restore[K,V](key:K,ttl:Long,value:Array[Byte])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "renamenx", "tail" : "(key: K, newKey: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.renamenx", "link" : "monix\/connect\/redis\/Redis$.html#renamenx[K,V](key:K,newKey:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "rename", "tail" : "(key: K, newKey: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.rename", "link" : "monix\/connect\/redis\/Redis$.html#rename[K,V](key:K,newKey:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "randomkey", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisKey.randomkey", "link" : "monix\/connect\/redis\/Redis$.html#randomkey[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "pttl", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.pttl", "link" : "monix\/connect\/redis\/Redis$.html#pttl[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pexpireat", "tail" : "(key: K, timestamp: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpireat", "link" : "monix\/connect\/redis\/Redis$.html#pexpireat[K,V](key:K,timestamp:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "pexpireat", "tail" : "(key: K, timestamp: Date)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpireat", "link" : "monix\/connect\/redis\/Redis$.html#pexpireat[K,V](key:K,timestamp:java.util.Date)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "pexpire", "tail" : "(key: K, milliseconds: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpire", "link" : "monix\/connect\/redis\/Redis$.html#pexpire[K,V](key:K,milliseconds:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "persist", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.persist", "link" : "monix\/connect\/redis\/Redis$.html#persist[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "objectRefcount", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.objectRefcount", "link" : "monix\/connect\/redis\/Redis$.html#objectRefcount[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectIdletime", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.objectIdletime", "link" : "monix\/connect\/redis\/Redis$.html#objectIdletime[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectEncoding", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.objectEncoding", "link" : "monix\/connect\/redis\/Redis$.html#objectEncoding[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "move", "tail" : "(key: K, db: Int)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.move", "link" : "monix\/connect\/redis\/Redis$.html#move[K,V](key:K,db:Int)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "migrate", "tail" : "(host: String, port: Int, key: K, db: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.migrate", "link" : "monix\/connect\/redis\/Redis$.html#migrate[K,V](host:String,port:Int,key:K,db:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "keys", "tail" : "(pattern: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisKey.keys", "link" : "monix\/connect\/redis\/Redis$.html#keys[K,V](pattern:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "expireat", "tail" : "(key: K, timestamp: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expireat", "link" : "monix\/connect\/redis\/Redis$.html#expireat[K,V](key:K,timestamp:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expireat", "tail" : "(key: K, timestamp: Date)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expireat", "link" : "monix\/connect\/redis\/Redis$.html#expireat[K,V](key:K,timestamp:java.util.Date)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expire", "tail" : "(key: K, seconds: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expire", "link" : "monix\/connect\/redis\/Redis$.html#expire[K,V](key:K,seconds:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "exists", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.exists", "link" : "monix\/connect\/redis\/Redis$.html#exists[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "dump", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Array[Byte]]", "member" : "monix.connect.redis.RedisKey.dump", "link" : "monix\/connect\/redis\/Redis$.html#dump[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "unlink", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.unlink", "link" : "monix\/connect\/redis\/Redis$.html#unlink[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "del", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.del", "link" : "monix\/connect\/redis\/Redis$.html#del[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/Redis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/Redis$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/Redis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/Redis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/Redis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/Redis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/Redis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/Redis$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/Redis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/Redis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/Redis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/Redis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/Redis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/Redis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/Redis$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/Redis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/Redis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/Redis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/Redis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisHash", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisHash$.html", "members_object" : [{"label" : "hvals", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisHash.hvals", "link" : "monix\/connect\/redis\/RedisHash$.html#hvals[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "hstrlen", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hstrlen", "link" : "monix\/connect\/redis\/RedisHash$.html#hstrlen[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hsetnx", "tail" : "(key: K, field: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hsetnx", "link" : "monix\/connect\/redis\/RedisHash$.html#hsetnx[K,V](key:K,field:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hset", "tail" : "(key: K, field: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hset", "link" : "monix\/connect\/redis\/RedisHash$.html#hset[K,V](key:K,field:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hscan", "tail" : "(key: K, scanCursor: ScanCursor)(connection: StatefulRedisConnection[K, V]): Task[MapScanCursor[K, V]]", "member" : "monix.connect.redis.RedisHash.hscan", "link" : "monix\/connect\/redis\/RedisHash$.html#hscan[K,V](key:K,scanCursor:io.lettuce.core.ScanCursor)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.MapScanCursor[K,V]]", "kind" : "def"}, {"label" : "hscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[MapScanCursor[K, V]]", "member" : "monix.connect.redis.RedisHash.hscan", "link" : "monix\/connect\/redis\/RedisHash$.html#hscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.MapScanCursor[K,V]]", "kind" : "def"}, {"label" : "hmset", "tail" : "(key: K, map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisHash.hmset", "link" : "monix\/connect\/redis\/RedisHash$.html#hmset[K,V](key:K,map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "hmget", "tail" : "(key: K, fields: K*)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisHash.hmget", "link" : "monix\/connect\/redis\/RedisHash$.html#hmget[K,V](key:K,fields:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "hlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hlen", "link" : "monix\/connect\/redis\/RedisHash$.html#hlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hkeys", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisHash.hkeys", "link" : "monix\/connect\/redis\/RedisHash$.html#hkeys[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "hgetall", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Map[K, V]]", "member" : "monix.connect.redis.RedisHash.hgetall", "link" : "monix\/connect\/redis\/RedisHash$.html#hgetall[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Map[K,V]]", "kind" : "def"}, {"label" : "hincrbyfloat", "tail" : "(key: K, field: K, amount: Double)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisHash.hincrbyfloat", "link" : "monix\/connect\/redis\/RedisHash$.html#hincrbyfloat[K,V](key:K,field:K,amount:Double)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "hincrby", "tail" : "(key: K, field: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hincrby", "link" : "monix\/connect\/redis\/RedisHash$.html#hincrby[K,V](key:K,field:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hget", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Option[V]]", "member" : "monix.connect.redis.RedisHash.hget", "link" : "monix\/connect\/redis\/RedisHash$.html#hget[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "hexists", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hexists", "link" : "monix\/connect\/redis\/RedisHash$.html#hexists[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hdel", "tail" : "(key: K, fields: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hdel", "link" : "monix\/connect\/redis\/RedisHash$.html#hdel[K,V](key:K,fields:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisHash$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisHash$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisHash$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisHash$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisHash$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisHash$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisHash$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisHash$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisHash$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisHash$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisHash$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisHash$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisHash$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisHash$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisHash$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisHash$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisHash$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisHash$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisHash$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisKey", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisKey$.html", "members_object" : [{"label" : "scan", "tail" : "(scanCursor: ScanCursor)(connection: StatefulRedisConnection[K, V]): Task[KeyScanCursor[K]]", "member" : "monix.connect.redis.RedisKey.scan", "link" : "monix\/connect\/redis\/RedisKey$.html#scan[K,V](scanCursor:io.lettuce.core.ScanCursor)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyScanCursor[K]]", "kind" : "def"}, {"label" : "scan", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[KeyScanCursor[K]]", "member" : "monix.connect.redis.RedisKey.scan", "link" : "monix\/connect\/redis\/RedisKey$.html#scan[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyScanCursor[K]]", "kind" : "def"}, {"label" : "type", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.type", "link" : "monix\/connect\/redis\/RedisKey$.html#type[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ttl", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.ttl", "link" : "monix\/connect\/redis\/RedisKey$.html#ttl[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "touch", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.touch", "link" : "monix\/connect\/redis\/RedisKey$.html#touch[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sort", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisKey.sort", "link" : "monix\/connect\/redis\/RedisKey$.html#sort[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "restore", "tail" : "(key: K, ttl: Long, value: Array[Byte])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.restore", "link" : "monix\/connect\/redis\/RedisKey$.html#restore[K,V](key:K,ttl:Long,value:Array[Byte])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "renamenx", "tail" : "(key: K, newKey: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.renamenx", "link" : "monix\/connect\/redis\/RedisKey$.html#renamenx[K,V](key:K,newKey:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "rename", "tail" : "(key: K, newKey: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.rename", "link" : "monix\/connect\/redis\/RedisKey$.html#rename[K,V](key:K,newKey:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "randomkey", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisKey.randomkey", "link" : "monix\/connect\/redis\/RedisKey$.html#randomkey[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "pttl", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.pttl", "link" : "monix\/connect\/redis\/RedisKey$.html#pttl[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pexpireat", "tail" : "(key: K, timestamp: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpireat", "link" : "monix\/connect\/redis\/RedisKey$.html#pexpireat[K,V](key:K,timestamp:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "pexpireat", "tail" : "(key: K, timestamp: Date)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpireat", "link" : "monix\/connect\/redis\/RedisKey$.html#pexpireat[K,V](key:K,timestamp:java.util.Date)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "pexpire", "tail" : "(key: K, milliseconds: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpire", "link" : "monix\/connect\/redis\/RedisKey$.html#pexpire[K,V](key:K,milliseconds:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "persist", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.persist", "link" : "monix\/connect\/redis\/RedisKey$.html#persist[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "objectRefcount", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.objectRefcount", "link" : "monix\/connect\/redis\/RedisKey$.html#objectRefcount[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectIdletime", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.objectIdletime", "link" : "monix\/connect\/redis\/RedisKey$.html#objectIdletime[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectEncoding", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.objectEncoding", "link" : "monix\/connect\/redis\/RedisKey$.html#objectEncoding[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "move", "tail" : "(key: K, db: Int)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.move", "link" : "monix\/connect\/redis\/RedisKey$.html#move[K,V](key:K,db:Int)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "migrate", "tail" : "(host: String, port: Int, key: K, db: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.migrate", "link" : "monix\/connect\/redis\/RedisKey$.html#migrate[K,V](host:String,port:Int,key:K,db:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "keys", "tail" : "(pattern: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisKey.keys", "link" : "monix\/connect\/redis\/RedisKey$.html#keys[K,V](pattern:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "expireat", "tail" : "(key: K, timestamp: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expireat", "link" : "monix\/connect\/redis\/RedisKey$.html#expireat[K,V](key:K,timestamp:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expireat", "tail" : "(key: K, timestamp: Date)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expireat", "link" : "monix\/connect\/redis\/RedisKey$.html#expireat[K,V](key:K,timestamp:java.util.Date)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expire", "tail" : "(key: K, seconds: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expire", "link" : "monix\/connect\/redis\/RedisKey$.html#expire[K,V](key:K,seconds:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "exists", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.exists", "link" : "monix\/connect\/redis\/RedisKey$.html#exists[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "dump", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Array[Byte]]", "member" : "monix.connect.redis.RedisKey.dump", "link" : "monix\/connect\/redis\/RedisKey$.html#dump[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "unlink", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.unlink", "link" : "monix\/connect\/redis\/RedisKey$.html#unlink[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "del", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.del", "link" : "monix\/connect\/redis\/RedisKey$.html#del[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisList", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisList$.html", "members_object" : [{"label" : "rpushx", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.rpushx", "link" : "monix\/connect\/redis\/RedisList$.html#rpushx[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpush", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.rpush", "link" : "monix\/connect\/redis\/RedisList$.html#rpush[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpoplpush", "tail" : "(source: K, destination: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.rpoplpush", "link" : "monix\/connect\/redis\/RedisList$.html#rpoplpush[K,V](source:K,destination:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "rpop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.rpop", "link" : "monix\/connect\/redis\/RedisList$.html#rpop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "ltrim", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisList.ltrim", "link" : "monix\/connect\/redis\/RedisList$.html#ltrim[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "lset", "tail" : "(key: K, index: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisList.lset", "link" : "monix\/connect\/redis\/RedisList$.html#lset[K,V](key:K,index:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "lrem", "tail" : "(key: K, count: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lrem", "link" : "monix\/connect\/redis\/RedisList$.html#lrem[K,V](key:K,count:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisList.lrange", "link" : "monix\/connect\/redis\/RedisList$.html#lrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "lpushx", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lpushx", "link" : "monix\/connect\/redis\/RedisList$.html#lpushx[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lpush", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lpush", "link" : "monix\/connect\/redis\/RedisList$.html#lpush[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lpop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.lpop", "link" : "monix\/connect\/redis\/RedisList$.html#lpop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "llen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.llen", "link" : "monix\/connect\/redis\/RedisList$.html#llen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "linsert", "tail" : "(key: K, before: Boolean, pivot: V, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.linsert", "link" : "monix\/connect\/redis\/RedisList$.html#linsert[K,V](key:K,before:Boolean,pivot:V,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lindex", "tail" : "(key: K, index: Long)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.lindex", "link" : "monix\/connect\/redis\/RedisList$.html#lindex[K,V](key:K,index:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "brpoplpush", "tail" : "(timeout: Long, source: K, destination: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.brpoplpush", "link" : "monix\/connect\/redis\/RedisList$.html#brpoplpush[K,V](timeout:Long,source:K,destination:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "brpop", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisList.brpop", "link" : "monix\/connect\/redis\/RedisList$.html#brpop[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "blpop", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisList.blpop", "link" : "monix\/connect\/redis\/RedisList$.html#blpop[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisPubSub", "members_trait" : [{"label" : "waitForReplication", "tail" : "(replicas: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.waitForReplication", "link" : "monix\/connect\/redis\/RedisPubSub.html#waitForReplication[K,V](replicas:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "quit", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.quit", "link" : "monix\/connect\/redis\/RedisPubSub.html#quit[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readWrite", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readWrite", "link" : "monix\/connect\/redis\/RedisPubSub.html#readWrite[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readOnly", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readOnly", "link" : "monix\/connect\/redis\/RedisPubSub.html#readOnly[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ping", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.ping", "link" : "monix\/connect\/redis\/RedisPubSub.html#ping[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "role", "tail" : "()(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisPubSub.role", "link" : "monix\/connect\/redis\/RedisPubSub.html#role[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "echo", "tail" : "(msg: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisPubSub.echo", "link" : "monix\/connect\/redis\/RedisPubSub.html#echo[K,V](msg:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "pubsubNumpat", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumpat", "link" : "monix\/connect\/redis\/RedisPubSub.html#pubsubNumpat[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pubsubNumsub", "tail" : "(channels: K*)(connection: StatefulRedisConnection[K, V]): Task[Map[K, Long]]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumsub", "link" : "monix\/connect\/redis\/RedisPubSub.html#pubsubNumsub[K,V](channels:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Map[K,Long]]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(channel: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/RedisPubSub.html#pubsubChannels[K,V](channel:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/RedisPubSub.html#pubsubChannels[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "publish", "tail" : "(channel: K, message: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.publish", "link" : "monix\/connect\/redis\/RedisPubSub.html#publish[K,V](channel:K,message:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisPubSub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisPubSub.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisPubSub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisPubSub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisPubSub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisPubSub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisPubSub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisPubSub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisPubSub.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisPubSub.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisPubSub.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisPubSub.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisPubSub.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisPubSub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisPubSub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisPubSub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisPubSub$.html", "members_object" : [{"label" : "waitForReplication", "tail" : "(replicas: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.waitForReplication", "link" : "monix\/connect\/redis\/RedisPubSub$.html#waitForReplication[K,V](replicas:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "quit", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.quit", "link" : "monix\/connect\/redis\/RedisPubSub$.html#quit[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readWrite", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readWrite", "link" : "monix\/connect\/redis\/RedisPubSub$.html#readWrite[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readOnly", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readOnly", "link" : "monix\/connect\/redis\/RedisPubSub$.html#readOnly[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ping", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.ping", "link" : "monix\/connect\/redis\/RedisPubSub$.html#ping[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "role", "tail" : "()(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisPubSub.role", "link" : "monix\/connect\/redis\/RedisPubSub$.html#role[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "echo", "tail" : "(msg: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisPubSub.echo", "link" : "monix\/connect\/redis\/RedisPubSub$.html#echo[K,V](msg:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "pubsubNumpat", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumpat", "link" : "monix\/connect\/redis\/RedisPubSub$.html#pubsubNumpat[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pubsubNumsub", "tail" : "(channels: K*)(connection: StatefulRedisConnection[K, V]): Task[Map[K, Long]]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumsub", "link" : "monix\/connect\/redis\/RedisPubSub$.html#pubsubNumsub[K,V](channels:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Map[K,Long]]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(channel: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/RedisPubSub$.html#pubsubChannels[K,V](channel:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/RedisPubSub$.html#pubsubChannels[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "publish", "tail" : "(channel: K, message: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.publish", "link" : "monix\/connect\/redis\/RedisPubSub$.html#publish[K,V](channel:K,message:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisPubSub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisPubSub$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisPubSub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisPubSub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisPubSub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisPubSub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisPubSub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisPubSub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisPubSub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisPubSub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisPubSub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisPubSub$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisPubSub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisPubSub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisPubSub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisPubSub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/redis\/RedisPubSub.html", "kind" : "trait"}, {"name" : "monix.connect.redis.RedisServer", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisServer$.html", "members_object" : [{"label" : "flushdbAsync", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.flushdbAsync", "link" : "monix\/connect\/redis\/RedisServer$.html#flushdbAsync[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "flushallAsync", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.flushallAsync", "link" : "monix\/connect\/redis\/RedisServer$.html#flushallAsync[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "configResetstat", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.configResetstat", "link" : "monix\/connect\/redis\/RedisServer$.html#configResetstat[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "configGet", "tail" : "(parameter: String)(connection: StatefulRedisConnection[K, V]): Task[Map[String, String]]", "member" : "monix.connect.redis.RedisServer.configGet", "link" : "monix\/connect\/redis\/RedisServer$.html#configGet[K,V](parameter:String)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[scala.collection.mutable.Map[String,String]]", "kind" : "def"}, {"label" : "commandCount", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisServer.commandCount", "link" : "monix\/connect\/redis\/RedisServer$.html#commandCount[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "clientList", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientList", "link" : "monix\/connect\/redis\/RedisServer$.html#clientList[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientKill", "tail" : "(addr: String)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientKill", "link" : "monix\/connect\/redis\/RedisServer$.html#clientKill[K,V](addr:String)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientSetname", "tail" : "(name: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientSetname", "link" : "monix\/connect\/redis\/RedisServer$.html#clientSetname[K,V](name:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientGetname", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientGetname", "link" : "monix\/connect\/redis\/RedisServer$.html#clientGetname[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "bgsave", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.bgsave", "link" : "monix\/connect\/redis\/RedisServer$.html#bgsave[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "bgrewriteaof", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.bgrewriteaof", "link" : "monix\/connect\/redis\/RedisServer$.html#bgrewriteaof[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisSet", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisSet$.html", "members_object" : [{"label" : "sscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ValueScanCursor[V]]", "member" : "monix.connect.redis.RedisSet.sscan", "link" : "monix\/connect\/redis\/RedisSet$.html#sscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ValueScanCursor[V]]", "kind" : "def"}, {"label" : "sunionstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sunionstore", "link" : "monix\/connect\/redis\/RedisSet$.html#sunionstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sunion", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sunion", "link" : "monix\/connect\/redis\/RedisSet$.html#sunion[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "srem", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.srem", "link" : "monix\/connect\/redis\/RedisSet$.html#srem[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "srandmember", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.srandmember", "link" : "monix\/connect\/redis\/RedisSet$.html#srandmember[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "srandmember", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisSet.srandmember", "link" : "monix\/connect\/redis\/RedisSet$.html#srandmember[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "spop", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.spop", "link" : "monix\/connect\/redis\/RedisSet$.html#spop[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "spop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisSet.spop", "link" : "monix\/connect\/redis\/RedisSet$.html#spop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "smembers", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.smembers", "link" : "monix\/connect\/redis\/RedisSet$.html#smembers[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "smove", "tail" : "(source: K, destination: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisSet.smove", "link" : "monix\/connect\/redis\/RedisSet$.html#smove[K,V](source:K,destination:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sismember", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisSet.sismember", "link" : "monix\/connect\/redis\/RedisSet$.html#sismember[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sinterstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sinterstore", "link" : "monix\/connect\/redis\/RedisSet$.html#sinterstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sinter", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sinter", "link" : "monix\/connect\/redis\/RedisSet$.html#sinter[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sdiffstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sdiffstore", "link" : "monix\/connect\/redis\/RedisSet$.html#sdiffstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sdiff", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sdiff", "link" : "monix\/connect\/redis\/RedisSet$.html#sdiff[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "scard", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.scard", "link" : "monix\/connect\/redis\/RedisSet$.html#scard[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sadd", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sadd", "link" : "monix\/connect\/redis\/RedisSet$.html#sadd[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisSortedSet", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisSortedSet$.html", "members_object" : [{"label" : "zunionstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zunionstore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zunionstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zscore", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zscore[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValueScanCursor[V]]", "member" : "monix.connect.redis.RedisSortedSet.zscan", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValueScanCursor[V]]", "kind" : "def"}, {"label" : "zrevrank", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrevrank", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrank[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrevrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscoreWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscoreWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrangebyscore", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebylex", "tail" : "(key: K, range: Range[_ <: V], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangeWithScores", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangeWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangeWithScores[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrange", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zremrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zremrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zremrangebyrank", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebyrank", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zremrangebyrank[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zremrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zremrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrem", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrem", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrem[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrank", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrank", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrank[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscoreWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscoreWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrangebyscore", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebylex", "tail" : "(key: K, range: Range[_ <: V], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangeWithScores", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangeWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangeWithScores[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrange", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zpopmax", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmax", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zpopmax[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmax", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmax", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zpopmax[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmin", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmin", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zpopmin[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmin", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmin", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zpopmin[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zlexcount", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zlexcount", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zlexcount[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zinterstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zinterstore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zinterstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zincrby", "tail" : "(key: K, amount: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zincrby", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zincrby[K,V](key:K,amount:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zcount", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zcount", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zcount[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zcard", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zcard", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zcard[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zaddincr", "tail" : "(key: K, score: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zaddincr", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zaddincr[K,V](key:K,score:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zadd", "tail" : "(key: K, scoredValues: ScoredValue[V]*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zadd", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zadd[K,V](key:K,scoredValues:io.lettuce.core.ScoredValue[V]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zadd", "tail" : "(key: K, score: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zadd", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zadd[K,V](key:K,score:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bzpopmax", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, ScoredValue[V]]]", "member" : "monix.connect.redis.RedisSortedSet.bzpopmax", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#bzpopmax[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,io.lettuce.core.ScoredValue[V]]]", "kind" : "def"}, {"label" : "bzpopmin", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, ScoredValue[V]]]", "member" : "monix.connect.redis.RedisSortedSet.bzpopmin", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#bzpopmin[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,io.lettuce.core.ScoredValue[V]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisSortedSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisStream", "members_trait" : [{"label" : "xtrim", "tail" : "(key: K, approximateTrimming: Boolean, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/RedisStream.html#xtrim[K,V](key:K,approximateTrimming:Boolean,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xtrim", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/RedisStream.html#xtrim[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/RedisStream.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/RedisStream.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xreadgroup", "tail" : "(consumer: Consumer[K], streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xreadgroup", "link" : "monix\/connect\/redis\/RedisStream.html#xreadgroup[K,V](consumer:io.lettuce.core.Consumer[K],streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xread", "tail" : "(streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xread", "link" : "monix\/connect\/redis\/RedisStream.html#xread[K,V](streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/RedisStream.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/RedisStream.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, consumer: Consumer[K], range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream.html#xpending[K,V](key:K,consumer:io.lettuce.core.Consumer[K],range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream.html#xpending[K,V](key:K,group:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream.html#xpending[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xlen", "link" : "monix\/connect\/redis\/RedisStream.html#xlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupSetid", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupSetid", "link" : "monix\/connect\/redis\/RedisStream.html#xgroupSetid[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xgroupDestroy", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDestroy", "link" : "monix\/connect\/redis\/RedisStream.html#xgroupDestroy[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupDelconsumer", "tail" : "(key: K, consumer: Consumer[K])(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDelconsumer", "link" : "monix\/connect\/redis\/RedisStream.html#xgroupDelconsumer[K,V](key:K,consumer:io.lettuce.core.Consumer[K])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupCreate", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupCreate", "link" : "monix\/connect\/redis\/RedisStream.html#xgroupCreate[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xdel", "tail" : "(key: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xdel", "link" : "monix\/connect\/redis\/RedisStream.html#xdel[K,V](key:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xclaim", "tail" : "(key: K, consumer: Consumer[K], minIdleTime: Long, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xclaim", "link" : "monix\/connect\/redis\/RedisStream.html#xclaim[K,V](key:K,consumer:io.lettuce.core.Consumer[K],minIdleTime:Long,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xadd", "tail" : "(key: K, body: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xadd", "link" : "monix\/connect\/redis\/RedisStream.html#xadd[K,V](key:K,body:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xack", "tail" : "(key: K, group: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xack", "link" : "monix\/connect\/redis\/RedisStream.html#xack[K,V](key:K,group:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisStream.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "The Stream is a new data type introduced recently, wwhich models a log data structurein a more abstract way, like a log file often implemented as a file open in apend only mode,Redis streams are primarily an append only data structure.", "object" : "monix\/connect\/redis\/RedisStream$.html", "members_object" : [{"label" : "xtrim", "tail" : "(key: K, approximateTrimming: Boolean, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/RedisStream$.html#xtrim[K,V](key:K,approximateTrimming:Boolean,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xtrim", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/RedisStream$.html#xtrim[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/RedisStream$.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/RedisStream$.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xreadgroup", "tail" : "(consumer: Consumer[K], streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xreadgroup", "link" : "monix\/connect\/redis\/RedisStream$.html#xreadgroup[K,V](consumer:io.lettuce.core.Consumer[K],streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xread", "tail" : "(streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xread", "link" : "monix\/connect\/redis\/RedisStream$.html#xread[K,V](streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/RedisStream$.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/RedisStream$.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, consumer: Consumer[K], range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream$.html#xpending[K,V](key:K,consumer:io.lettuce.core.Consumer[K],range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream$.html#xpending[K,V](key:K,group:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream$.html#xpending[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xlen", "link" : "monix\/connect\/redis\/RedisStream$.html#xlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupSetid", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupSetid", "link" : "monix\/connect\/redis\/RedisStream$.html#xgroupSetid[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xgroupDestroy", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDestroy", "link" : "monix\/connect\/redis\/RedisStream$.html#xgroupDestroy[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupDelconsumer", "tail" : "(key: K, consumer: Consumer[K])(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDelconsumer", "link" : "monix\/connect\/redis\/RedisStream$.html#xgroupDelconsumer[K,V](key:K,consumer:io.lettuce.core.Consumer[K])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupCreate", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupCreate", "link" : "monix\/connect\/redis\/RedisStream$.html#xgroupCreate[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xdel", "tail" : "(key: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xdel", "link" : "monix\/connect\/redis\/RedisStream$.html#xdel[K,V](key:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xclaim", "tail" : "(key: K, consumer: Consumer[K], minIdleTime: Long, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xclaim", "link" : "monix\/connect\/redis\/RedisStream$.html#xclaim[K,V](key:K,consumer:io.lettuce.core.Consumer[K],minIdleTime:Long,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xadd", "tail" : "(key: K, body: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xadd", "link" : "monix\/connect\/redis\/RedisStream$.html#xadd[K,V](key:K,body:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xack", "tail" : "(key: K, group: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xack", "link" : "monix\/connect\/redis\/RedisStream$.html#xack[K,V](key:K,group:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisStream$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisStream$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisStream$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisStream$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisStream$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisStream$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisStream$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisStream$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisStream$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisStream$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisStream$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisStream$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisStream$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisStream$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisStream$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisStream$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/redis\/RedisStream.html", "kind" : "trait"}, {"name" : "monix.connect.redis.RedisString", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisString$.html", "members_object" : [{"label" : "strlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.strlen", "link" : "monix\/connect\/redis\/RedisString$.html#strlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setrange", "tail" : "(key: K, offset: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.setrange", "link" : "monix\/connect\/redis\/RedisString$.html#setrange[K,V](key:K,offset:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setnx", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisString.setnx", "link" : "monix\/connect\/redis\/RedisString$.html#setnx[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "psetex", "tail" : "(key: K, milliseconds: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.psetex", "link" : "monix\/connect\/redis\/RedisString$.html#psetex[K,V](key:K,milliseconds:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "setex", "tail" : "(key: K, seconds: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.setex", "link" : "monix\/connect\/redis\/RedisString$.html#setex[K,V](key:K,seconds:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "setbit", "tail" : "(key: K, offset: Long, value: Int)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.setbit", "link" : "monix\/connect\/redis\/RedisString$.html#setbit[K,V](key:K,offset:Long,value:Int)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "set", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.set", "link" : "monix\/connect\/redis\/RedisString$.html#set[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "msetnx", "tail" : "(map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisString.msetnx", "link" : "monix\/connect\/redis\/RedisString$.html#msetnx[K,V](map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "mset", "tail" : "(map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.mset", "link" : "monix\/connect\/redis\/RedisString$.html#mset[K,V](map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "mget", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisString.mget", "link" : "monix\/connect\/redis\/RedisString$.html#mget[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "incrbyfloat", "tail" : "(key: K, amount: Double)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisString.incrbyfloat", "link" : "monix\/connect\/redis\/RedisString$.html#incrbyfloat[K,V](key:K,amount:Double)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "incrby", "tail" : "(key: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.incrby", "link" : "monix\/connect\/redis\/RedisString$.html#incrby[K,V](key:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "incr", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.incr", "link" : "monix\/connect\/redis\/RedisString$.html#incr[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "getset", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.getset", "link" : "monix\/connect\/redis\/RedisString$.html#getset[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "getrange", "tail" : "(key: K, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.getrange", "link" : "monix\/connect\/redis\/RedisString$.html#getrange[K,V](key:K,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "getbit", "tail" : "(key: K, offset: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.getbit", "link" : "monix\/connect\/redis\/RedisString$.html#getbit[K,V](key:K,offset:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "get", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.get", "link" : "monix\/connect\/redis\/RedisString$.html#get[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "decrby", "tail" : "(key: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.decrby", "link" : "monix\/connect\/redis\/RedisString$.html#decrby[K,V](key:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "decr", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.decr", "link" : "monix\/connect\/redis\/RedisString$.html#decr[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopXor", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopXor", "link" : "monix\/connect\/redis\/RedisString$.html#bitopXor[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopOr", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopOr", "link" : "monix\/connect\/redis\/RedisString$.html#bitopOr[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopNot", "tail" : "(destination: K, source: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopNot", "link" : "monix\/connect\/redis\/RedisString$.html#bitopNot[K,V](destination:K,source:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopAnd", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopAnd", "link" : "monix\/connect\/redis\/RedisString$.html#bitopAnd[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/RedisString$.html#bitpos[K,V](key:K,state:Boolean,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean, start: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/RedisString$.html#bitpos[K,V](key:K,state:Boolean,start:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/RedisString$.html#bitpos[K,V](key:K,state:Boolean)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitcount", "tail" : "(key: K, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitcount", "link" : "monix\/connect\/redis\/RedisString$.html#bitcount[K,V](key:K,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitcount", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitcount", "link" : "monix\/connect\/redis\/RedisString$.html#bitcount[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "append", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.append", "link" : "monix\/connect\/redis\/RedisString$.html#append[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisString$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisString$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisString$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisString$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisString$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisString$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisString$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisString$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisString$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisString$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisString$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisString$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisString$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisString$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisString$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisString$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisString$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisString$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisString$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.dynamodb" : [{"name" : "monix.connect.dynamodb.DynamoDb", "shortDescription" : "An idiomatic DynamoDb client integrated with Monix ecosystem.", "object" : "monix\/connect\/dynamodb\/DynamoDb$.html", "members_object" : [{"label" : "transformer", "tail" : "(retries: Int, delayAfterFailure: Option[FiniteDuration])(dynamoDbOp: DynamoDbOp[In, Out], client: DynamoDbAsyncClient): (Observable[In]) â‡’ Observable[Task[Out]]", "member" : "monix.connect.dynamodb.DynamoDb.transformer", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#transformer[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](retries:Int,delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration])(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out],implicitclient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):monix.reactive.Observable[In]=>monix.reactive.Observable[monix.eval.Task[Out]]", "kind" : "def"}, {"label" : "consumer", "tail" : "(retries: Int, delayAfterFailure: Option[FiniteDuration])(dynamoDbOp: DynamoDbOp[In, Out], client: DynamoDbAsyncClient): Consumer[In, Unit]", "member" : "monix.connect.dynamodb.DynamoDb.consumer", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#consumer[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](retries:Int,delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration])(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out],implicitclient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):monix.reactive.Consumer[In,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.dynamodb.DynamoDbOp", "members_trait" : [{"label" : "apply", "tail" : "(dynamoDbRequest: In)(client: DynamoDbAsyncClient): Task[Out]", "member" : "monix.connect.dynamodb.DynamoDbOp.apply", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#apply(dynamoDbRequest:In)(implicitclient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):monix.eval.Task[Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "execute", "tail" : "(dynamoDbRequest: In)(client: DynamoDbAsyncClient): CompletableFuture[Out]", "member" : "monix.connect.dynamodb.DynamoDbOp.execute", "link" : "monix\/connect\/dynamodb\/DynamoDbOp.html#execute(dynamoDbRequest:In)(implicitclient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):java.util.concurrent.CompletableFuture[Out]", "kind" : "abstract def"}], "shortDescription" : "Abstracts the execution of any given DynamoDbRequest with its correspondent operation that returns DynamoDbResponse.", "object" : "monix\/connect\/dynamodb\/DynamoDbOp$.html", "members_object" : [{"label" : "create", "tail" : "(request: In, retries: Int, delayAfterFailure: Option[FiniteDuration])(dynamoDbOp: DynamoDbOp[In, Out], client: DynamoDbAsyncClient): Task[Out]", "member" : "monix.connect.dynamodb.DynamoDbOp.create", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#create[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](request:In,retries:Int,delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration])(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out],implicitclient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):monix.eval.Task[Out]", "kind" : "final def"}, {"label" : "Implicits", "tail" : "", "member" : "monix.connect.dynamodb.DynamoDbOp.Implicits", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#Implicits", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/dynamodb\/DynamoDbOp.html", "kind" : "trait"}]};